import collections
import os
import re
import codecs
import numpy

#train = input("Enter the path for the training data: ")
#test = input("Enter the path for the testing data: ")
#Stop = input("Would you like stopwords(enter 'yes' or 'no'): ").lower()
#Lamda = input("Enter a lamda value: ")
#Iteration = input("Enter the number of desired iterations: ")
train = "assignment3_train/train"
test = "assignment3_test/test"
Stop = 'no'
Lamda = 10
Iteration = 10

ham = list()
spam = list()
countTrainHam = 0
countTrainSpam = 0
dictProbHam = dict()
dictProbSpam = dict()
learningRate = 0.001
regularization = Lamda

def read_stopwords():
    if (os.path.isfile("stopwords.txt")) != True:
        print("Stopwords file not found!")
    else: 
        with open('stopwords.txt') as f:
            file = f.read().lower().replace('\n', ' ').split(' ')
        return file



def FileOpen(filename, path):
    fileHandler = codecs.open(path + "\\" + filename, 'rU','latin-1')
    words = [locate.lower() for locate in re.findall('[A-Za-z0-9\']+', fileHandler.read())]
    fileHandler.close()
    return words

def browseDirectory(path):
    wordList = list()
    fileCount = 0
    for files in os.listdir(path):
        if files.endswith(".txt"):
            wordList = wordList + FileOpen(files, path)
            fileCount = fileCount + 1
    return wordList, fileCount


def removeStopWords():
    for word in stopWords:
        if word in ham:
            i = 0
            lengthh=len(ham)
            while (i < lengthh):
                if (ham[i] == word):
                    ham.remove(word)
                    lengthh = lengthh - 1
                    continue
                i = i + 1
        if word in spam:
            i = 0
            lengths=len(spam)
            while (i < lengths):
                if (spam[i] == word):
                    spam.remove(word)
                    lengths = lengths - 1
                    continue
                i = i + 1
        if word in hamTest:
            i = 0
            lengthht=len(hamTest)
            while (i < lengthht):
                if (hamTest[i] == word):
                    hamTest.remove(word)
                    lengthht = lengthht - 1
                    continue
                i = i + 1
        if word in SpamTest:
            i = 0
            lengthst=len(SpamTest)
            while (i < lengthst):
                if (SpamTest[i] == word):
                    SpamTest.remove(word)
                    lengthst = lengthst - 1
                    continue
                i = i + 1


def initiliazeMatrix(row, column):
    featureMatrix = [0] * row
    for i in range(row):
        featureMatrix[i] = [0] * column
    return featureMatrix


def makeMatrix(featureMatrix, path, listBagOfWords, rowMatrix, classifier, TargetList):
    for fileName in os.listdir(path):
        words = FileOpen(fileName, path)
        temp = dict(collections.Counter(words))
        for key in temp:
            if key in listBagOfWords:
                column = listBagOfWords.index(key)
                featureMatrix[rowMatrix][column] = temp[key]
        if (classifier == "ham"):
            TargetList[rowMatrix] = 0
        elif (classifier == "spam"):
            TargetList[rowMatrix] = 1
        rowMatrix = rowMatrix + 1
    return featureMatrix, rowMatrix, TargetList



def sigmoid(x):
    den = (1 + numpy.exp(-x))
    sigma = 1 / den
    return sigma


def sigmoidFunction(totalFiles, totalFeatures, featureMatrix):
    global sigMoidList
    for files in range(totalFiles):
        summation = 1.0

        for features in range(totalFeatures):
            summation = summation + featureMatrix[files][features] * weightOfFeature[features]
        sigMoidList[files] = sigmoid(summation)


def calculateWeightUpdate(totalFiles, numberOfFeature, featureMatrix, TargetList):
    global sigMoidList

    for feature in range(numberOfFeature):
        weight = bias
        for files in range(totalFiles):
            frequency = featureMatrix[files][feature]
            y = TargetList[files]
            sigmoidValue = sigMoidList[files]
            weight = weight + (frequency * (y - sigmoidValue))

        oldW = weightOfFeature[feature]
        weightOfFeature[feature] = weightOfFeature[feature] + ((weight * learningRate) - (learningRate * regularization * oldW))

    return weightOfFeature


def trainingFunction(totalFiles, numbeOffeatures, trainFeatureMatrix, TargetList):
    sigmoidFunction(totalFiles, numbeOffeatures, trainFeatureMatrix)
    calculateWeightUpdate(totalFiles, numbeOffeatures, trainFeatureMatrix, TargetList)


def classifyData():
    correctHam = 0
    incorrectHam = 0
    correctSpam = 0
    incorrectSpam = 0
    idx=0
    for file in range(totalTestFiles):
        summation = 1.0
        for i in range(len(testListBagOfWords)):
            word = testListBagOfWords[i]

            if word in listBagOfWords:
                index = listBagOfWords.index(word)
                weight = weightOfFeature[index]
                wordcount = testFeatureMatrix[file][i]

                summation = summation+ (weight * wordcount)

        sigSum = sigmoid(summation)
        if (testTargetList[file] == 0):
            if sigSum < 0.5:
                correctHam = correctHam + 1.0
            else:
                incorrectHam = incorrectHam + 1.0
        else:
            if sigSum >= 0.5:
                correctSpam = correctSpam + 1.0
            else:
                incorrectSpam = incorrectSpam + 1.0
        idx += 1
    print("Ham Accuracy:" + str((correctHam / (correctHam + incorrectHam)) * 100))
    print("Spam Accuracy:" + str((correctSpam / (correctSpam + incorrectSpam)) * 100))
    print("Accuracy:" + str(((correctHam+correctSpam) / (correctHam + incorrectHam+correctSpam + incorrectSpam)) * 100))




stopWords = read_stopwords()

bias = 0
xnode = 1
directoryHam = train + '/ham'
directorySpam = train + '/spam'
testHam = test + '/ham'
testSpam = test + '/spam'


regex = re.compile(r'[A-Za-z0-9\']')

ham, countTrainHam = browseDirectory(directoryHam)
spam, countTrainSpam = browseDirectory(directorySpam)


hamTest, countTestHam = browseDirectory(testHam)
SpamTest, countTestSpam = browseDirectory(testSpam)

if (Stop == "yes"):
    removeStopWords()


rawHam = dict(collections.Counter(w.lower() for w in ham))
dictHam = dict((k, int(v)) for k, v in rawHam.items())
rawSpam = dict(collections.Counter(w.lower() for w in spam))
dictSpam = dict((k, int(v)) for k, v in rawSpam.items())

bagOfWords = ham + spam
dictBagOfWords = collections.Counter(bagOfWords)
listBagOfWords = list(dictBagOfWords.keys())
TargetList = list() 
totalFiles = countTrainHam + countTrainSpam

rawTestHam = dict(collections.Counter(w.lower() for w in hamTest))
dictTestHam = dict((k, int(v)) for k, v in rawTestHam.items())
rawTestSpam = dict(collections.Counter(w.lower() for w in SpamTest))
dictTestSpam = dict((k, int(v)) for k, v in rawTestSpam.items())


testBagOfWords = hamTest + SpamTest
testDictBagOfWords = collections.Counter(testBagOfWords)
testListBagOfWords = list(testDictBagOfWords.keys())
testTargetList = list() 
totalTestFiles = countTestHam + countTestSpam
trainFeatureMatrix = initiliazeMatrix(totalFiles, len(listBagOfWords))
testFeatureMatrix = initiliazeMatrix(totalTestFiles, len(testListBagOfWords))

rowMatrix = 0
testRowMatrix = 0

sigMoidList = list()
for i in range(totalFiles):
    sigMoidList.append(-1)
    TargetList.append(-1)

for i in range(totalTestFiles):
    testTargetList.append(-1)

weightOfFeature = list()

for feature in range(len(listBagOfWords)):
    weightOfFeature.append(0)



trainFeatureMatrix, rowMatrix, TargetList = makeMatrix(trainFeatureMatrix, directoryHam, listBagOfWords, rowMatrix, "ham", TargetList)
trainFeatureMatrix, rowMatrix, TargetList = makeMatrix(trainFeatureMatrix, directorySpam, listBagOfWords, rowMatrix, "spam", TargetList)
testFeatureMatrix, testRowMatrix, testTargetList = makeMatrix(testFeatureMatrix, testHam, testListBagOfWords, testRowMatrix, "ham", testTargetList)
testFeatureMatrix, testRowMatrix, testTargetList = makeMatrix(testFeatureMatrix, testSpam, testListBagOfWords, testRowMatrix, "spam", testTargetList)


print("Training...")
for i in range(int(Iteration)):
    trainingFunction(totalFiles, len(listBagOfWords), trainFeatureMatrix, TargetList)


print("Algorithm is trained, test data will now be classififed.")
classifyData()
